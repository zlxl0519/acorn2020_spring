{"version":3,"sources":["pages/Home.js","pages/Study.js","pages/Game.js","pages/Buy.js","App09_SinglePage.js","Root.js","serviceWorker.js","index.js"],"names":["Home","Study","Game","match","params","name","Buy","location","query","queryString","parse","search","console","log","num","withRouter","macth","history","activeStyle","color","fontWeight","React","useState","path","setPath","onChange","e","target","value","type","placeholder","onClick","push","to","exact","component","Root","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kOAYeA,EATJ,WACP,OACI,6BACI,2EACA,4ECKGC,EATH,WACR,OACI,6BACI,4EACA,4ECSGC,EAbJ,SAAC,GAAW,IAAVC,EAAS,EAATA,MACT,OACI,6BACI,2EACA,0EACA,2BACI,gCAASA,EAAMC,OAAOC,MAD1B,yD,iBCeGC,EAfL,SAAC,GAAc,IAAbC,EAAY,EAAZA,SAGFC,EAAMC,IAAYC,MAAMH,EAASI,QAIvC,OADAC,QAAQC,IAAIL,GAER,6BACI,gGACA,2BAAIA,EAAMM,IAAV,WAAkBN,EAAMH,KAAxB,mBC2CGU,eAvDQ,SAAC,GAA6B,EAA5BR,SAA4B,EAAlBS,MAAmB,IAAZC,EAAW,EAAXA,QAEhCC,EAAY,CACdC,MAAM,MACNC,WAAW,QAJkC,EAO3BC,IAAMC,SAAS,IAPY,mBAO1CC,EAP0C,KAOpCC,EAPoC,KAoBjD,OACI,6BACI,yDACA,2BAAOC,SAbD,SAACC,GACXF,EAAQE,EAAEC,OAAOC,QAYaA,MAAOL,EAAMM,KAAK,OAAOC,YAAY,gDAC/D,4BAAQC,QAVL,WACPnB,QAAQC,IAAIU,GAEZN,EAAQe,KAAKT,KAOT,gBACA,4BAOI,4BAAI,kBAAC,IAAD,CAASU,GAAG,IAAIf,YAAaA,GAA7B,SACJ,4BAAI,kBAAC,IAAD,CAASe,GAAG,SAASf,YAAaA,GAAlC,UACJ,4BAAI,kBAAC,IAAD,CAASe,GAAG,QAAQf,YAAaA,GAAjC,SAGJ,4BAAI,kBAAC,IAAD,CAASe,GAAG,aAAaf,YAAaA,GAAtC,cACJ,4BAAI,kBAAC,IAAD,CAASe,GAAG,aAAaf,YAAaA,GAAtC,cAEJ,4BAAI,kBAAC,IAAD,CAASe,GAAG,4BAA4Bf,YAAaA,GAArD,uCACJ,4BAAI,kBAAC,IAAD,CAASe,GAAG,2BAA2Bf,YAAaA,GAApD,uCACJ,4BAAI,kBAAC,IAAD,CAASe,GAAG,yBAAyBf,YAAaA,GAAlD,wCAGR,kBAAC,IAAD,CAAOgB,OAAK,EAACX,KAAK,IAAIY,UAAWnC,IACjC,kBAAC,IAAD,CAAOuB,KAAK,SAASY,UAAWlC,IAChC,kBAAC,IAAD,CAAOiC,OAAK,EAACX,KAAK,QAAQY,UAAWjC,IACrC,kBAAC,IAAD,CAAOqB,KAAK,cAAcY,UAAWjC,IACrC,kBAAC,IAAD,CAAOqB,KAAK,OAAOY,UAAW7B,QCzC3B8B,EATJ,WAEP,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,QCGQC,QACW,cAA7BC,OAAO/B,SAASgC,UAEe,UAA7BD,OAAO/B,SAASgC,UAEhBD,OAAO/B,SAASgC,SAASpC,MACvB,2DCZNqC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.d49939c8.chunk.js","sourcesContent":["// src/pages/Home.js 파일\r\nimport React from 'react';\r\n\r\nconst Home=()=>{\r\n    return(\r\n        <div>\r\n            <h2>home 페이지 입니다.</h2>\r\n            <p>어쩌구... 저쩌구...</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","// src/pages/Study.js 파일\r\nimport React from 'react';\r\n\r\nconst Study=()=>{\r\n    return(\r\n        <div>\r\n            <h2>study 페이지 입니다.</h2>\r\n            <p>어쩌구... 저쩌구...</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Study;","// src/pages/Game.js 파일\r\nimport React from 'react';\r\n// prop.match 이다.\r\nconst Game=({match})=>{\r\n    return(\r\n        <div>\r\n            <h2>game 페이지 입니다.</h2>\r\n            <p>어쩌구... 저쩌구...</p>\r\n            <p>\r\n                <strong>{match.params.name}</strong>\r\n                게임을 시작 합니다.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;","// src/pages/Buy.js\r\nimport React from 'react';\r\nimport queryString from 'query-string';\r\n/*\r\n    query 문자열을 추출하려면 query-string 모듈을 설치해야 한다.\r\n    > yarn add query-string\r\n*/\r\n\r\nconst Buy=({location})=>{\r\n    \r\n    //query-string 모듈을 활용해서 query 문자열을 object 로 변환\r\n    const query=queryString.parse(location.search);\r\n\r\n    //query 는 object 이다.\r\n    console.log(query);\r\n    return(\r\n        <div>\r\n            <h2>상품 구입 페이지 입니다.</h2>\r\n            <p>{query.num} 번 {query.name} 상품</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Buy;\r\n","import React from 'react';\r\nimport { NavLink, Route, withRouter } from 'react-router-dom';\r\nimport { Buy, Game, Home, Study } from './pages';\r\n\r\n// 하단에서 withRouter() 를 활용해서 export 했기 때문에\r\n// location, match, hisroty props 가 전달된다.\r\nconst App09_SinglePage=({location, macth, history})=>{\r\n    \r\n    const activeStyle={\r\n        color:\"red\",\r\n        fontWeight:\"bold\"\r\n    };\r\n\r\n    const [path, setPath]=React.useState('');\r\n\r\n    //input 요소에 문자열을 입력 했을때 경로를 바꿔주고\r\n    const changed=(e)=>{\r\n        setPath(e.target.value);\r\n    };\r\n    //이동 버튼을 눌렀을때 해당 경로로 이동 시킨다.\r\n    const move=()=>{\r\n        console.log(path);\r\n        //history 객체를 이용해서 강제 이동 시킨다.\r\n        history.push(path);\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <h1>Router 테스트</h1>\r\n            <input onChange={changed} value={path} type=\"text\" placeholder=\"이동할경로 입력\"/>\r\n            <button onClick={move}>이동</button>\r\n            <ul>\r\n                {/* 다른 링크 페이지로 이동 */}\r\n                {/* <li><a href=\"/\">home</a></li>\r\n                <li><a href=\"/study\">study</a></li>\r\n                <li><a href=\"/game\">geme</a></li> */}\r\n                \r\n                {/* 같은 페이지 내에서의 이동 */}\r\n                <li><NavLink to=\"/\" activeStyle={activeStyle}>home</NavLink></li>\r\n                <li><NavLink to=\"/study\" activeStyle={activeStyle}>study</NavLink></li>\r\n                <li><NavLink to=\"/game\" activeStyle={activeStyle}>game</NavLink></li>\r\n                \r\n                {/* <Route path=\"/game/:name\" component={Game}/> 로 처리된다. */}\r\n                <li><NavLink to=\"/game/star\" activeStyle={activeStyle}>star game</NavLink></li>\r\n                <li><NavLink to=\"/game/cart\" activeStyle={activeStyle}>cart game</NavLink></li>\r\n\r\n                <li><NavLink to=\"/buy?num=1&name=handphone\" activeStyle={activeStyle}>1 번 상품 사기</NavLink></li>\r\n                <li><NavLink to=\"/buy?num=2&name=computer\" activeStyle={activeStyle}>2 번 상품 사기</NavLink></li>\r\n                <li><NavLink to=\"/buy?num=3&name=coffee\" activeStyle={activeStyle}>3 번 상품 사기</NavLink></li>\r\n            </ul>\r\n            {/* Home 이 정확히 일치할때만 나오게 하겠다 exact path 는뜻 */}\r\n            <Route exact path=\"/\" component={Home}/>\r\n            <Route path=\"/study\" component={Study}/>\r\n            <Route exact path=\"/game\" component={Game}/>\r\n            <Route path=\"/game/:name\" component={Game}/>\r\n            <Route path=\"/buy\" component={Buy}/>\r\n        </div>\r\n    );\r\n};\r\n//withRouter() 함수를 호출해서 export 해주면 Router 에 관련된\r\n// props 가 이 컴포넌트에 전달된다.\r\nexport default withRouter(App09_SinglePage);","// src/Root.js file\r\nimport React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App09_SinglePage from './App09_SinglePage';\r\n\r\nconst Root=()=>{\r\n\r\n    return(\r\n        <BrowserRouter>\r\n            <App09_SinglePage />\r\n        </BrowserRouter>\r\n    );\r\n};\r\n\r\nexport default Root;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Root';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}